name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build and Package
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Maven Repository
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build with Maven
        run: |
          cd SpringTest1/demo
          mvn clean package -DskipTests

      - name: Debug Build Output
        run: |
          echo "Checking the build output directory:"
          ls -R SpringTest1/demo/target

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: application-jar
          path: SpringTest1/demo/target/*.jar

  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: application-jar
          path: application-jar

      - name: Debug Downloaded Artifact
        run: |
          echo "Checking the downloaded artifact directory:"
          ls -R application-jar

      - name: Set Up SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.DEPLOY_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Add Server to Known Hosts
        run: |
          ssh-keyscan -H ${{ secrets.DEPLOY_SERVER }} >> ~/.ssh/known_hosts

      - name: Debug Destination Path
        run: echo "Deploying to path:${{ secrets.DEPLOY_PATH }}"

      - name: Deploy JAR to Server
        env:
          DEPLOY_SERVER: ${{ secrets.DEPLOY_SERVER }}
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
          DEPLOY_PATH: ~/Chatbot/SpringTest1/demo/target
        run: |
          echo "Transferring JAR to the server..."
          scp application-jar/*.jar $DEPLOY_USER@$DEPLOY_SERVER:$DEPLOY_PATH
          
          echo "Deployed successfully!"

      - name: Run JAR File on Server
        env:
          DEPLOY_SERVER: ${{ secrets.DEPLOY_SERVER }}
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
          DEPLOY_PATH: Chatbot/SpringTest1/demo/target
        run: |
          echo "Killing process running on port 8080 (if any)..."
          ssh $DEPLOY_USER@$DEPLOY_SERVER "lsof -ti:8080 | xargs --no-run-if-empty kill -9"

          # echo "Running the JAR file on the server..."
          # ssh $DEPLOY_USER@$DEPLOY_SERVER "java -jar Chatbot/SpringTest1/demo/target/demo-0.0.1-SNAPSHOT.jar"
          # echo "JAR file executed successfully!"

          echo "Starting the new JAR file in the background..."
          ssh $DEPLOY_USER@$DEPLOY_SERVER "nohup java -jar $DEPLOY_PATH/demo-0.0.1-SNAPSHOT.jar > $DEPLOY_PATH/app.log 2>&1 &"
          echo "JAR file started successfully in the background!"

      - name: Send Notification to Discord (Success)
        if: success()
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          curl -H "Content-Type: application/json" \
            -d '{"content": "✅ CI/CD Pipeline succeeded for the `main` branch. The application has been deployed and is running successfully!"}' \
            $DISCORD_WEBHOOK_URL

      - name: Send Notification to Discord (Failure)
        if: failure()
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          curl -H "Content-Type: application/json" \
            -d '{"content": "❌ CI/CD Pipeline failed for the `main` branch. Please check the logs for details."}' \
            $DISCORD_WEBHOOK_URL
